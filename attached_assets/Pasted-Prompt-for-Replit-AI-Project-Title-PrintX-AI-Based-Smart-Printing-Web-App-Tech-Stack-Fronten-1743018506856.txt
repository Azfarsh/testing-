Prompt for Replit AI:Project Title: PrintX – AI-Based Smart Printing Web AppTech Stack:Frontend: React.js (with Tailwind CSS for UI)Backend: NextjsDatabase: Firebase FirestoreAuthentication: Firebase Authentication (Google, Email/Password)Payment Gateway: Razorpay APIPrinting API: Ezeep APIGeolocation API: Google Maps API (for user location and nearest printer search)Project Overview:PrintX is a smart printing web app where users can upload documents, customize print settings, select a token type (normal or priority), and send print requests to nearby vendors. The system includes AI-based document handling to route jobs efficiently to vendors using Ezeep API.Core Features:1. User Authentication (Firebase Auth)User login/signup via Email/Password or Google OAuthRole-based redirection:Users → User DashboardVendors → Vendor DashboardAdmins → Admin Dashboard2. Home Page (Public)Overview of PrintX services"Get Started" button for signup/loginContact Page, About Page, and Services Page3. User DashboardLocation Access: Prompt user to allow location accessNearby Printers: Show list of nearest printers based on Google Maps APIUpload Section:Upload PDFs, DOCX files with print options:Number of pagesColor/BW printPaper type & sizeToken Selection:Normal token (Green, Free, max 20 pages)Priority token (Red, Paid, max 80 pages, charged via Razorpay API)Payment Processing: Razorpay API integration4. AI-Based Document Handling (Ezeep API)AI maps document print jobs to the best printer type using Ezeep APIDisplays:Token TypePrinter TypeUser Document Print Requests5. Vendor DashboardPrint Requests Management:New job requestsEstimated printing timeDocument previewPrint History:Completed job trackingAnalytics Panel:Earnings reportPrinter usage statistics6. Admin DashboardGlobal Print Job Tracking:Monitor document requests across vendorsPrint job history & analyticsUser & Vendor Management:Add/Edit/Delete vendorsManage user accountsSecurity & Logs:Track login historyLog failed login attemptsSecurity Considerations:Authentication: Firebase authentication with role-based access control (RBAC)Payment Security: Secure transactions using Razorpay APIData Protection: Secure Firebase Firestore with proper read/write rulesPrint Job Privacy: Documents are handled securely via Ezeep API with restricted accessAdditional Notes for Replit AI:Ensure responsive UI for mobile and desktopImplement role-based authentication for different dashboardsHandle real-time status updates using Firebase FirestoreImplement error handling for API failures (Ezeep, Razorpay)Secure admin dashboard access with multi-factor authentication (MFA)